Traceback (most recent call last):
  File "/home/beau/miniconda3/envs/jupyterbook/lib/python3.10/site-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
  File "/home/beau/miniconda3/envs/jupyterbook/lib/python3.10/site-packages/nbclient/client.py", line 1204, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/home/beau/miniconda3/envs/jupyterbook/lib/python3.10/site-packages/nbclient/util.py", line 84, in wrapped
    return just_run(coro(*args, **kwargs))
  File "/home/beau/miniconda3/envs/jupyterbook/lib/python3.10/site-packages/nbclient/util.py", line 62, in just_run
    return loop.run_until_complete(coro)
  File "/home/beau/miniconda3/envs/jupyterbook/lib/python3.10/asyncio/base_events.py", line 649, in run_until_complete
    return future.result()
  File "/home/beau/miniconda3/envs/jupyterbook/lib/python3.10/site-packages/nbclient/client.py", line 663, in async_execute
    await self.async_execute_cell(
  File "/home/beau/miniconda3/envs/jupyterbook/lib/python3.10/site-packages/nbclient/client.py", line 965, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/home/beau/miniconda3/envs/jupyterbook/lib/python3.10/site-packages/nbclient/client.py", line 862, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
 import pandas as pd
import plotly.express as px

# Specify the path to the CSV file
csv_file = 'financial_data.csv'

# Read the CSV file into a DataFrame
df = pd.read_csv(csv_file)

# Melt the DataFrame to long format for Plotly
df_long = pd.melt(df, id_vars=["Year"], value_vars=["Revenue", "Operating Result", "Net Result"],
                  var_name="Metric", value_name="Value")

# Plotting
fig = px.parallel_coordinates(df_long, color="Metric", dimensions=["Year", "Value"],
                              labels={"Value": "Amount (in millions of euros)", "Year": "Year"},
                              color_continuous_scale=px.colors.qualitative.Plotly)

# Customize layout
fig.update_layout(
    title="Yearly Financial Data - Parallel Coordinates Plot",
    height=600,
    width=800,
)

# Show the plot
fig.show()
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mValueError[0m                                Traceback (most recent call last)
Cell [0;32mIn[8], line 15[0m
[1;32m     11[0m df_long [38;5;241m=[39m pd[38;5;241m.[39mmelt(df, id_vars[38;5;241m=[39m[[38;5;124m"[39m[38;5;124mYear[39m[38;5;124m"[39m], value_vars[38;5;241m=[39m[[38;5;124m"[39m[38;5;124mRevenue[39m[38;5;124m"[39m, [38;5;124m"[39m[38;5;124mOperating Result[39m[38;5;124m"[39m, [38;5;124m"[39m[38;5;124mNet Result[39m[38;5;124m"[39m],
[1;32m     12[0m                  var_name[38;5;241m=[39m[38;5;124m"[39m[38;5;124mMetric[39m[38;5;124m"[39m, value_name[38;5;241m=[39m[38;5;124m"[39m[38;5;124mValue[39m[38;5;124m"[39m)
[1;32m     14[0m [38;5;66;03m# Plotting[39;00m
[0;32m---> 15[0m fig [38;5;241m=[39m [43mpx[49m[38;5;241;43m.[39;49m[43mparallel_coordinates[49m[43m([49m[43mdf_long[49m[43m,[49m[43m [49m[43mcolor[49m[38;5;241;43m=[39;49m[38;5;124;43m"[39;49m[38;5;124;43mMetric[39;49m[38;5;124;43m"[39;49m[43m,[49m[43m [49m[43mdimensions[49m[38;5;241;43m=[39;49m[43m[[49m[38;5;124;43m"[39;49m[38;5;124;43mYear[39;49m[38;5;124;43m"[39;49m[43m,[49m[43m [49m[38;5;124;43m"[39;49m[38;5;124;43mValue[39;49m[38;5;124;43m"[39;49m[43m][49m[43m,[49m
[1;32m     16[0m [43m                             [49m[43mlabels[49m[38;5;241;43m=[39;49m[43m{[49m[38;5;124;43m"[39;49m[38;5;124;43mValue[39;49m[38;5;124;43m"[39;49m[43m:[49m[43m [49m[38;5;124;43m"[39;49m[38;5;124;43mAmount (in millions of euros)[39;49m[38;5;124;43m"[39;49m[43m,[49m[43m [49m[38;5;124;43m"[39;49m[38;5;124;43mYear[39;49m[38;5;124;43m"[39;49m[43m:[49m[43m [49m[38;5;124;43m"[39;49m[38;5;124;43mYear[39;49m[38;5;124;43m"[39;49m[43m}[49m[43m,[49m
[1;32m     17[0m [43m                             [49m[43mcolor_continuous_scale[49m[38;5;241;43m=[39;49m[43mpx[49m[38;5;241;43m.[39;49m[43mcolors[49m[38;5;241;43m.[39;49m[43mqualitative[49m[38;5;241;43m.[39;49m[43mPlotly[49m[43m)[49m
[1;32m     19[0m [38;5;66;03m# Customize layout[39;00m
[1;32m     20[0m fig[38;5;241m.[39mupdate_layout(
[1;32m     21[0m    title[38;5;241m=[39m[38;5;124m"[39m[38;5;124mYearly Financial Data - Parallel Coordinates Plot[39m[38;5;124m"[39m,
[1;32m     22[0m    height[38;5;241m=[39m[38;5;241m600[39m,
[1;32m     23[0m    width[38;5;241m=[39m[38;5;241m800[39m,
[1;32m     24[0m )

File [0;32m~/miniconda3/envs/jupyterbook/lib/python3.10/site-packages/plotly/express/_chart_types.py:1418[0m, in [0;36mparallel_coordinates[0;34m(data_frame, dimensions, color, labels, color_continuous_scale, range_color, color_continuous_midpoint, title, template, width, height)[0m
[1;32m   1400[0m [38;5;28;01mdef[39;00m [38;5;21mparallel_coordinates[39m(
[1;32m   1401[0m     data_frame[38;5;241m=[39m[38;5;28;01mNone[39;00m,
[1;32m   1402[0m     dimensions[38;5;241m=[39m[38;5;28;01mNone[39;00m,
[0;32m   (...)[0m
[1;32m   1411[0m     height[38;5;241m=[39m[38;5;28;01mNone[39;00m,
[1;32m   1412[0m ) [38;5;241m-[39m[38;5;241m>[39m go[38;5;241m.[39mFigure:
[1;32m   1413[0m [38;5;250m    [39m[38;5;124;03m"""[39;00m
[1;32m   1414[0m [38;5;124;03m    In a parallel coordinates plot, each row of `data_frame` is represented[39;00m
[1;32m   1415[0m [38;5;124;03m    by a polyline mark which traverses a set of parallel axes, one for each[39;00m
[1;32m   1416[0m [38;5;124;03m    of the `dimensions`.[39;00m
[1;32m   1417[0m [38;5;124;03m    """[39;00m
[0;32m-> 1418[0m     [38;5;28;01mreturn[39;00m [43mmake_figure[49m[43m([49m[43margs[49m[38;5;241;43m=[39;49m[38;5;28;43mlocals[39;49m[43m([49m[43m)[49m[43m,[49m[43m [49m[43mconstructor[49m[38;5;241;43m=[39;49m[43mgo[49m[38;5;241;43m.[39;49m[43mParcoords[49m[43m)[49m

File [0;32m~/miniconda3/envs/jupyterbook/lib/python3.10/site-packages/plotly/express/_core.py:2270[0m, in [0;36mmake_figure[0;34m(args, constructor, trace_patch, layout_patch)[0m
[1;32m   2265[0m         group[var] [38;5;241m=[39m [38;5;241m100.0[39m [38;5;241m*[39m group[var] [38;5;241m/[39m group_sum
[1;32m   2267[0m patch, fit_results [38;5;241m=[39m make_trace_kwargs(
[1;32m   2268[0m     args, trace_spec, group, mapping_labels[38;5;241m.[39mcopy(), sizeref
[1;32m   2269[0m )
[0;32m-> 2270[0m [43mtrace[49m[38;5;241;43m.[39;49m[43mupdate[49m[43m([49m[43mpatch[49m[43m)[49m
[1;32m   2271[0m [38;5;28;01mif[39;00m fit_results [38;5;129;01mis[39;00m [38;5;129;01mnot[39;00m [38;5;28;01mNone[39;00m:
[1;32m   2272[0m     trendline_rows[38;5;241m.[39mappend(mapping_labels[38;5;241m.[39mcopy())

File [0;32m~/miniconda3/envs/jupyterbook/lib/python3.10/site-packages/plotly/basedatatypes.py:5139[0m, in [0;36mBasePlotlyType.update[0;34m(self, dict1, overwrite, **kwargs)[0m
[1;32m   5137[0m         BaseFigure[38;5;241m.[39m_perform_update([38;5;28mself[39m, kwargs, overwrite[38;5;241m=[39moverwrite)
[1;32m   5138[0m [38;5;28;01melse[39;00m:
[0;32m-> 5139[0m     [43mBaseFigure[49m[38;5;241;43m.[39;49m[43m_perform_update[49m[43m([49m[38;5;28;43mself[39;49m[43m,[49m[43m [49m[43mdict1[49m[43m,[49m[43m [49m[43moverwrite[49m[38;5;241;43m=[39;49m[43moverwrite[49m[43m)[49m
[1;32m   5140[0m     BaseFigure[38;5;241m.[39m_perform_update([38;5;28mself[39m, kwargs, overwrite[38;5;241m=[39moverwrite)
[1;32m   5142[0m [38;5;28;01mreturn[39;00m [38;5;28mself[39m

File [0;32m~/miniconda3/envs/jupyterbook/lib/python3.10/site-packages/plotly/basedatatypes.py:3919[0m, in [0;36mBaseFigure._perform_update[0;34m(plotly_obj, update_obj, overwrite)[0m
[1;32m   3913[0m validator [38;5;241m=[39m plotly_obj[38;5;241m.[39m_get_prop_validator(key)
[1;32m   3915[0m [38;5;28;01mif[39;00m [38;5;28misinstance[39m(validator, CompoundValidator) [38;5;129;01mand[39;00m [38;5;28misinstance[39m(val, [38;5;28mdict[39m):
[1;32m   3916[0m 
[1;32m   3917[0m     [38;5;66;03m# Update compound objects recursively[39;00m
[1;32m   3918[0m     [38;5;66;03m# plotly_obj[key].update(val)[39;00m
[0;32m-> 3919[0m     [43mBaseFigure[49m[38;5;241;43m.[39;49m[43m_perform_update[49m[43m([49m[43mplotly_obj[49m[43m[[49m[43mkey[49m[43m][49m[43m,[49m[43m [49m[43mval[49m[43m)[49m
[1;32m   3920[0m [38;5;28;01melif[39;00m [38;5;28misinstance[39m(validator, CompoundArrayValidator):
[1;32m   3921[0m     [38;5;28;01mif[39;00m plotly_obj[key]:
[1;32m   3922[0m         [38;5;66;03m# plotly_obj has an existing non-empty array for key[39;00m
[1;32m   3923[0m         [38;5;66;03m# In this case we merge val into the existing elements[39;00m

File [0;32m~/miniconda3/envs/jupyterbook/lib/python3.10/site-packages/plotly/basedatatypes.py:3940[0m, in [0;36mBaseFigure._perform_update[0;34m(plotly_obj, update_obj, overwrite)[0m
[1;32m   3937[0m                 plotly_obj[key] [38;5;241m=[39m val
[1;32m   3938[0m         [38;5;28;01melse[39;00m:
[1;32m   3939[0m             [38;5;66;03m# Assign non-compound value[39;00m
[0;32m-> 3940[0m             [43mplotly_obj[49m[43m[[49m[43mkey[49m[43m][49m [38;5;241m=[39m val
[1;32m   3942[0m [38;5;28;01melif[39;00m [38;5;28misinstance[39m(plotly_obj, [38;5;28mtuple[39m):
[1;32m   3944[0m     [38;5;28;01mif[39;00m [38;5;28mlen[39m(update_obj) [38;5;241m==[39m [38;5;241m0[39m:
[1;32m   3945[0m         [38;5;66;03m# Nothing to do[39;00m

File [0;32m~/miniconda3/envs/jupyterbook/lib/python3.10/site-packages/plotly/basedatatypes.py:4874[0m, in [0;36mBasePlotlyType.__setitem__[0;34m(self, prop, value)[0m
[1;32m   4870[0m         [38;5;28mself[39m[38;5;241m.[39m_set_array_prop(prop, value)
[1;32m   4872[0m     [38;5;66;03m# ### Handle simple property ###[39;00m
[1;32m   4873[0m     [38;5;28;01melse[39;00m:
[0;32m-> 4874[0m         [38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43m_set_prop[49m[43m([49m[43mprop[49m[43m,[49m[43m [49m[43mvalue[49m[43m)[49m
[1;32m   4875[0m [38;5;28;01melse[39;00m:
[1;32m   4876[0m     [38;5;66;03m# Make sure properties dict is initialized[39;00m
[1;32m   4877[0m     [38;5;28mself[39m[38;5;241m.[39m_init_props()

File [0;32m~/miniconda3/envs/jupyterbook/lib/python3.10/site-packages/plotly/basedatatypes.py:5218[0m, in [0;36mBasePlotlyType._set_prop[0;34m(self, prop, val)[0m
[1;32m   5216[0m         [38;5;28;01mreturn[39;00m
[1;32m   5217[0m     [38;5;28;01melse[39;00m:
[0;32m-> 5218[0m         [38;5;28;01mraise[39;00m err
[1;32m   5220[0m [38;5;66;03m# val is None[39;00m
[1;32m   5221[0m [38;5;66;03m# -----------[39;00m
[1;32m   5222[0m [38;5;28;01mif[39;00m val [38;5;129;01mis[39;00m [38;5;28;01mNone[39;00m:
[1;32m   5223[0m     [38;5;66;03m# Check if we should send null update[39;00m

File [0;32m~/miniconda3/envs/jupyterbook/lib/python3.10/site-packages/plotly/basedatatypes.py:5213[0m, in [0;36mBasePlotlyType._set_prop[0;34m(self, prop, val)[0m
[1;32m   5210[0m validator [38;5;241m=[39m [38;5;28mself[39m[38;5;241m.[39m_get_validator(prop)
[1;32m   5212[0m [38;5;28;01mtry[39;00m:
[0;32m-> 5213[0m     val [38;5;241m=[39m [43mvalidator[49m[38;5;241;43m.[39;49m[43mvalidate_coerce[49m[43m([49m[43mval[49m[43m)[49m
[1;32m   5214[0m [38;5;28;01mexcept[39;00m [38;5;167;01mValueError[39;00m [38;5;28;01mas[39;00m err:
[1;32m   5215[0m     [38;5;28;01mif[39;00m [38;5;28mself[39m[38;5;241m.[39m_skip_invalid:

File [0;32m~/miniconda3/envs/jupyterbook/lib/python3.10/site-packages/_plotly_utils/basevalidators.py:1363[0m, in [0;36mColorValidator.validate_coerce[0;34m(self, v, should_raise)[0m
[1;32m   1360[0m invalid_els [38;5;241m=[39m [38;5;28mself[39m[38;5;241m.[39mfind_invalid_els(v, validated_v)
[1;32m   1362[0m [38;5;28;01mif[39;00m invalid_els [38;5;129;01mand[39;00m should_raise:
[0;32m-> 1363[0m     [38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43mraise_invalid_elements[49m[43m([49m[43minvalid_els[49m[43m)[49m
[1;32m   1365[0m [38;5;66;03m# ### Check that elements have valid colors types ###[39;00m
[1;32m   1366[0m [38;5;28;01melif[39;00m [38;5;28mself[39m[38;5;241m.[39mnumbers_allowed() [38;5;129;01mor[39;00m invalid_els:

File [0;32m~/miniconda3/envs/jupyterbook/lib/python3.10/site-packages/_plotly_utils/basevalidators.py:312[0m, in [0;36mBaseValidator.raise_invalid_elements[0;34m(self, invalid_els)[0m
[1;32m    310[0m     [38;5;28;01mdef[39;00m [38;5;21mraise_invalid_elements[39m([38;5;28mself[39m, invalid_els):
[1;32m    311[0m         [38;5;28;01mif[39;00m invalid_els:
[0;32m--> 312[0m             [38;5;28;01mraise[39;00m [38;5;167;01mValueError[39;00m(
[1;32m    313[0m [38;5;250m                [39m[38;5;124;03m"""[39;00m
[1;32m    314[0m [38;5;124;03m    Invalid element(s) received for the '{name}' property of {pname}[39;00m
[1;32m    315[0m [38;5;124;03m        Invalid elements include: {invalid}[39;00m
[1;32m    316[0m 
[1;32m    317[0m [38;5;124;03m{valid_clr_desc}"""[39;00m[38;5;241m.[39mformat(
[1;32m    318[0m                     name[38;5;241m=[39m[38;5;28mself[39m[38;5;241m.[39mplotly_name,
[1;32m    319[0m                     pname[38;5;241m=[39m[38;5;28mself[39m[38;5;241m.[39mparent_name,
[1;32m    320[0m                     invalid[38;5;241m=[39minvalid_els[:[38;5;241m10[39m],
[1;32m    321[0m                     valid_clr_desc[38;5;241m=[39m[38;5;28mself[39m[38;5;241m.[39mdescription(),
[1;32m    322[0m                 )
[1;32m    323[0m             )

[0;31mValueError[0m: 
    Invalid element(s) received for the 'color' property of parcoords.line
        Invalid elements include: ['Revenue', 'Revenue', 'Revenue', 'Revenue', 'Revenue', 'Revenue', 'Revenue', 'Revenue', 'Revenue', 'Revenue']

    The 'color' property is a color and may be specified as:
      - A hex string (e.g. '#ff0000')
      - An rgb/rgba string (e.g. 'rgb(255,0,0)')
      - An hsl/hsla string (e.g. 'hsl(0,100%,50%)')
      - An hsv/hsva string (e.g. 'hsv(0,100%,100%)')
      - A named CSS color:
            aliceblue, antiquewhite, aqua, aquamarine, azure,
            beige, bisque, black, blanchedalmond, blue,
            blueviolet, brown, burlywood, cadetblue,
            chartreuse, chocolate, coral, cornflowerblue,
            cornsilk, crimson, cyan, darkblue, darkcyan,
            darkgoldenrod, darkgray, darkgrey, darkgreen,
            darkkhaki, darkmagenta, darkolivegreen, darkorange,
            darkorchid, darkred, darksalmon, darkseagreen,
            darkslateblue, darkslategray, darkslategrey,
            darkturquoise, darkviolet, deeppink, deepskyblue,
            dimgray, dimgrey, dodgerblue, firebrick,
            floralwhite, forestgreen, fuchsia, gainsboro,
            ghostwhite, gold, goldenrod, gray, grey, green,
            greenyellow, honeydew, hotpink, indianred, indigo,
            ivory, khaki, lavender, lavenderblush, lawngreen,
            lemonchiffon, lightblue, lightcoral, lightcyan,
            lightgoldenrodyellow, lightgray, lightgrey,
            lightgreen, lightpink, lightsalmon, lightseagreen,
            lightskyblue, lightslategray, lightslategrey,
            lightsteelblue, lightyellow, lime, limegreen,
            linen, magenta, maroon, mediumaquamarine,
            mediumblue, mediumorchid, mediumpurple,
            mediumseagreen, mediumslateblue, mediumspringgreen,
            mediumturquoise, mediumvioletred, midnightblue,
            mintcream, mistyrose, moccasin, navajowhite, navy,
            oldlace, olive, olivedrab, orange, orangered,
            orchid, palegoldenrod, palegreen, paleturquoise,
            palevioletred, papayawhip, peachpuff, peru, pink,
            plum, powderblue, purple, red, rosybrown,
            royalblue, rebeccapurple, saddlebrown, salmon,
            sandybrown, seagreen, seashell, sienna, silver,
            skyblue, slateblue, slategray, slategrey, snow,
            springgreen, steelblue, tan, teal, thistle, tomato,
            turquoise, violet, wheat, white, whitesmoke,
            yellow, yellowgreen
      - A number that will be interpreted as a color
        according to parcoords.line.colorscale
      - A list or array of any of the above
ValueError: 
    Invalid element(s) received for the 'color' property of parcoords.line
        Invalid elements include: ['Revenue', 'Revenue', 'Revenue', 'Revenue', 'Revenue', 'Revenue', 'Revenue', 'Revenue', 'Revenue', 'Revenue']

    The 'color' property is a color and may be specified as:
      - A hex string (e.g. '#ff0000')
      - An rgb/rgba string (e.g. 'rgb(255,0,0)')
      - An hsl/hsla string (e.g. 'hsl(0,100%,50%)')
      - An hsv/hsva string (e.g. 'hsv(0,100%,100%)')
      - A named CSS color:
            aliceblue, antiquewhite, aqua, aquamarine, azure,
            beige, bisque, black, blanchedalmond, blue,
            blueviolet, brown, burlywood, cadetblue,
            chartreuse, chocolate, coral, cornflowerblue,
            cornsilk, crimson, cyan, darkblue, darkcyan,
            darkgoldenrod, darkgray, darkgrey, darkgreen,
            darkkhaki, darkmagenta, darkolivegreen, darkorange,
            darkorchid, darkred, darksalmon, darkseagreen,
            darkslateblue, darkslategray, darkslategrey,
            darkturquoise, darkviolet, deeppink, deepskyblue,
            dimgray, dimgrey, dodgerblue, firebrick,
            floralwhite, forestgreen, fuchsia, gainsboro,
            ghostwhite, gold, goldenrod, gray, grey, green,
            greenyellow, honeydew, hotpink, indianred, indigo,
            ivory, khaki, lavender, lavenderblush, lawngreen,
            lemonchiffon, lightblue, lightcoral, lightcyan,
            lightgoldenrodyellow, lightgray, lightgrey,
            lightgreen, lightpink, lightsalmon, lightseagreen,
            lightskyblue, lightslategray, lightslategrey,
            lightsteelblue, lightyellow, lime, limegreen,
            linen, magenta, maroon, mediumaquamarine,
            mediumblue, mediumorchid, mediumpurple,
            mediumseagreen, mediumslateblue, mediumspringgreen,
            mediumturquoise, mediumvioletred, midnightblue,
            mintcream, mistyrose, moccasin, navajowhite, navy,
            oldlace, olive, olivedrab, orange, orangered,
            orchid, palegoldenrod, palegreen, paleturquoise,
            palevioletred, papayawhip, peachpuff, peru, pink,
            plum, powderblue, purple, red, rosybrown,
            royalblue, rebeccapurple, saddlebrown, salmon,
            sandybrown, seagreen, seashell, sienna, silver,
            skyblue, slateblue, slategray, slategrey, snow,
            springgreen, steelblue, tan, teal, thistle, tomato,
            turquoise, violet, wheat, white, whitesmoke,
            yellow, yellowgreen
      - A number that will be interpreted as a color
        according to parcoords.line.colorscale
      - A list or array of any of the above

